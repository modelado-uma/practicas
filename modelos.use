model aviones

class Persona
attributes
nombre: String
edad: Integer
end

class Piloto < Persona
attributes
kmVolados : Integer
pro: Boolean
end

class Avion
attributes
vuelosCompletados : Integer
kilometrosRecorridos : Integer
end

class Aeropuerto
attributes 
nombre: String
end

class Aerolinea
attributes
nombre: String
id: Integer
end

class Almacen
attributes
capacidad: Integer
end

class Desguace < Almacen
end
class Hangar < Almacen
end

class Ciudad
attributes
nombre: String
end

class Vuelo
attributes
id: Integer
num_km: Integer
end

----------Asociaciones---------- 
association pilotadoPrincipal between
    Piloto[1] role principal
    Vuelo[1] role pPrincipal
end

association pilotadoSecundario between
    Piloto[0..1] role secundario
    Vuelo[1..*] role pSecundario
end

association AlmacenAvion between
    Avion [0..*] role avionesAlmacenados
    Almacen [0..1] role almacena
end 

association VueloAvion between
    Avion[0..1] role realiza
    Vuelo[0..*] role esRealizado
end

association PilotoAerolinea between
    Piloto [1..*] role trabajaPara
    Aerolinea [1..2] role tieneComoEmpleado
end

association CiudadAeropuerto between
    Ciudad[1] role tieneC
    Aeropuerto[0..1] role aeropuertosEnCiudad
end

association DesguaceAeropuerto between
    Desguace[0..1] role estaEnD
    Aeropuerto[1] role contieneD
end

association HangarAeropuerto between
    Hangar[0..*] role estaEnH
    Aeropuerto[1] role contieneH
end

association vueloPasajero between
    Vuelo[0..*] role lleva
    Persona[0..*] role pasajero
end

----------Inicio de Clases de Asociación----------

associationclass Contrato 
between
    Avion [1..*] role tiene
    Aerolinea [1..*] role tienen
    attributes
    num_Meses : Integer
    precio_Mes : Integer
    precio_Total : Integer
    derive: 
        self.num_Meses * self.precio_Mes
end

----------Fin de Clases de Asociación----------
----------Invariantes (Restricciones de Integridad)--------

constraints

context Avion
inv avionesEnDesguaceAdecuados:
-- Los aviones que deben encontrarse en un desguace son aquellos que han completado los 1000 viajes
    self.vuelosCompletados >= 1000 implies self.almacena.oclIsTypeOf(Desguace)

context Almacen
inv almacenNoSupereCapacidadMaxima:
    self.avionesAlmacenados->size() <= self.capacidad

context Piloto 
-- Los pilotos pro son aquellos que han participado como piloto secundario en un mínimo de 2000 vuelos y
--además deben haber participado como piloto principal en un mínimo de 1000 vuelos.
inv pilotosProValidos:
    self.pro implies (
        pilotadoPrincipal.allInstances()->select(pv | pv.principal = self)->size() >= 1000 and
        pilotadoSecundario.allInstances()->select(pv | pv.secundario = self)->size() >= 2000
    )

context Vuelo
-- Los pilotos principal y secundario deben ser personas distintas
inv pilotoPrincipalDistintoSecundario:
    self.principal <> self.secundario 

context Ciudad
-- Los aeropuertos se ubican en ciudades, no pudiendo haber más de un aeropuerto en cada ciudad
inv ciudadesConMaximoUnAeropuerto:
    self.aeropuertosEnCiudad->size() <= 1