-- (b)Este apartado consiste en modelar el comportamiento del sistema. En particular, se va a
-- modelar únicamente el comportamiento de los coches cuando viajan. Para ello, vamos a
-- registrar la velocidad de los coches. La velocidad de un coche indica cuántos kilómetros
-- avanza cada día en los viajes. El sistema también va a almacenar los kilómetros de los
-- viajes. Cuando un viaje está en curso, este atributo indica los kilómetros que lleva
-- realizado. Cuando un viaje se completa, este atributo debe tener el mismo valor que los
-- kilómetros del recorrido que ha realizado. Se deben modelar las siguientes acciones:

--  (b1) Un coche comienza un viaje desde la ciudad en la que se encuentra. Esta operación debe
-- recibir como parámetro el recorrido entre dos ciudades que debe realizar en su viaje.

--HECHO

-- (b2) Una operación avanzar que se ejecuta sobre los coches, y que no recibe ningún
-- parámetro. Esta operación debe hacer avanzar el coche el número de kilómetros
-- indicados en su velocidad si el coche está realizando algún viaje.

--HECHO

--  (b3) Se debe modelar el paso del tiempo, de modo que un tic del reloj representa el paso de
-- un día, lo cual se debe tener en cuenta a la hora de que los coches puedan avanzar en el
-- viaje que estén realizando.

--HECHO (ES EL RELOJ (?))

model practica2B

enum EstadoCoche {
    ESTACIONADO,
    ENVIAJE,
    ENTALLER
}

enum TipoRevision {
    MANTENIMIENTO,
    REPARACION
}

class Clock 

    attributes
        NOW : Integer init = 0 -- POSIX representation starting at 0
        resolution: Integer init = 1 
    operations
        tick() 
            begin
                self.NOW := self.NOW + self.resolution;
                for o in self.ao do 
                    o.tick()
            end;
        end
        post TimePasses: self.NOW = self.NOW@pre + self.resolution
        run (n: Integer)
            begin
                for i in Sequence{1..n} do
                    self.tick()
            end 
        end
    constraints
        inv PositiveResolution: self.resolution > 0
end

  abstract class ActiveObject -- real-time objects 
    operations
        tick() begin end 
end

association Time between 
    Clock [1] 
    ActiveObject [*] role ao ordered
end

class Coche < ActiveObject
attributes
enGarantia: Boolean
derive:
    let hoy:Integer = Clock.allInstances()->asSequence()->first().NOW in
    if hoy - self.fechaMatriculacion >= 400 then
        let ultimaRevisionOficial:Revision= self.revisionDelCoche->select(r | r.tallerQueRevisa.oclIsTypeOf(TallerOficial))->sortedBy(fechaFin)->last() in
        if hoy - (ultimaRevisionOficial.fechaFin + ultimaRevisionOficial.tallerQueRevisa.oclAsType(TallerOficial).garantia) > 0 then
            false
        else
            true
        endif
    else
        true
    endif
necesitaMantenimiento: Boolean
derive:
    let hoy:Integer = Clock.allInstances()->asSequence()->first().NOW in
    if hoy - self.fechaMatriculacion >= 400 then
        if self.revisionDelCoche->size() = 0 then
            true
        else
            hoy - self.revisionDelCoche->sortedBy(fechaInicio)->last().fechaFin > 100
        endif
    else 
        false
    endif
fechaMatriculacion: Integer
estado: EstadoCoche
numKm: Integer
derive:
    self.viajeQueHaceCoche->select(v|v.fechaFin <> null)->collect(viaje | viaje.distancia)->sum()
kmD: Integer
    operations
        comenzarViaje(v : Viaje) 
            begin
                declare dia : Integer;
                dia:=Clock.allInstances()->asSequence()->any(true).NOW;
                insert(self, v) into cocheHaceViaje;
                self.estado:=#ENVIAJE;
                v.fechaInicio:= dia;
                v.kmRecorridos:=0;
            end
            pre CondicionCoche : (self.estado=#ESTACIONADO) and (v.kmRecorridos=null) 
            post EstadoActualizado : (self.estado = #ENVIAJE)
            post FechaInicioEstablecida: (v.fechaInicio = Clock.allInstances()->asSequence()->any(true).NOW) 
            post ViajeAsignadoAlCoche: (self.viajeQueHaceCoche->includes(v))

        avanzarViaje() --Cada tick ejecuta un avanzarViaje
            begin
                declare v : Viaje, dia : Integer;
                dia:=Clock.allInstances()->asSequence()->any(true).NOW;
                v:=self.viajeQueHaceCoche->select(v | not v.destinoAlcanzado)->any(true);
                    if ((v.kmRecorridos + self.kmD) >= v.distancia) then 
                        v.kmRecorridos:=v.distancia;
                        self.estado:=#ESTACIONADO;
                        v.fechaFin:=dia;
                    else
                        v.kmRecorridos:=v.kmRecorridos + self.kmD
                    end
            end
            pre YaComenzado: (self.estado = #ENVIAJE) 
            post CondicionAvanzadoSiDestinoAlcanzo: let v : Viaje = self.viajeQueHaceCoche->select(v | not v.destinoAlcanzado)->any(true) in (v.kmRecorridos = v.distancia) implies (self.estado = #ESTACIONADO)
            post FechaFinDefinidaSiDestinoAlcanzado: let v : Viaje = self.viajeQueHaceCoche->select(v | not v.destinoAlcanzado)->any(true) in (v.kmRecorridos = v.distancia) implies (v.fechaFin = Clock.allInstances()->asSequence()->any(true).NOW)
            post KilometrajeActualizadoSiNoDestino: let v : Viaje = self.viajeQueHaceCoche->select(v | not v.destinoAlcanzado)->any(true) in  (v.kmRecorridos < v.distancia) implies (v.kmRecorridos = v.kmRecorridos@pre + self.kmD)

end

class Ciudad
end

class Viaje
attributes
fechaInicio: Integer
fechaFin: Integer
distancia: Integer
kmRecorridos: Integer
destinoAlcanzado: Boolean
derive:
    self.distancia = self.kmRecorridos
    
end

abstract class Taller
end

class TallerOficial < Taller
attributes
garantia: Integer
end

class TallerNoOficial < Taller
end

class Revision
attributes
fechaInicio: Integer
fechaFin: Integer
tipoRevision: TipoRevision
end

----------Asociaciones---------- 

association estacionadoEn between
    Ciudad[0..1] role ciudadCocheEstacionado
    Coche[*] role cocheEstacionadoEnCiudad
end

association cocheHaceViaje between
    Coche[1] role cocheEnElViaje
    Viaje[*] role viajeQueHaceCoche
end

association contieneTallerNoOficial between
    Ciudad[1] role ciudadConTallerNoOficial
    TallerNoOficial[*] role tallerNoOficialEstaEnCiudad
end

association tallerOficialCiudad between
    Ciudad[1] role ciudadConTallerOficial
    TallerOficial[1] role tallerOficialEstaEnCiudad
end

association cocheEnRevision between
    Coche[1] role cocheHaciendoRevision
    Revision[*] role revisionDelCoche
end

association tallerRevision between
    Taller[1] role tallerQueRevisa
    Revision[*] role RevisionRealizadaPorTaller
end

association ciudadDestinoViaje between
    Ciudad[1] role ciudadDestinoDelViaje
    Viaje[*] role viajaA
end

association ciudadOrigenViaje between
    Ciudad[1] role ciudadOrigenDelViaje
    Viaje[*] role viajaDesde
end

--Invariantes

constraints

context Viaje 
--cada ciudad debe estar al menos a 5 kilómetros de distancia de otra. 
inv distanciaMinimaEntreCiudades:
    self.distancia >= 5

--la ciudad de origen y destino de un viaje deben ser distintas
inv ciudadOrigenYDestinoDistintas:
    self.ciudadOrigenDelViaje <> self.ciudadDestinoDelViaje


context Coche
--un coche no podra pasar dos revisiones a la vez
inv revisionesDeCocheNoSePisan:
 	self.revisionDelCoche -> forAll (r1 | self.revisionDelCoche -> forAll (r2 | r1 <> r2 implies (r1.fechaFin <= r2.fechaInicio or r1.fechaInicio >= r2.fechaFin)))
 
--fecha de revision del coche tiene que ser posterior a fecha de matriculacion
inv fechaRevisionPosteriorAMatriculacion:
	self.revisionDelCoche -> forAll(r | r.fechaInicio >= self.fechaMatriculacion)

--Si un coche está siendo sometido a revisión en un taller, el coche se debe encontrar
--en la ciudad de ese mismo taller
inv cocheEnTallerMismaCiudad:
self.revisionDelCoche->exists(r | r.fechaInicio <> null) implies(
	self.estado = #ENTALLER implies(
	let ultimoTaller: Taller = self.revisionDelCoche -> sortedBy(fechaFin) -> last().tallerQueRevisa in ultimoTaller.oclIsTypeOf(TallerOficial) and ultimoTaller.oclAsType(TallerOficial).ciudadConTallerOficial = self.ciudadCocheEstacionado or ultimoTaller.oclIsTypeOf(TallerNoOficial) and ultimoTaller.oclAsType(TallerNoOficial).ciudadConTallerNoOficial = self.ciudadCocheEstacionado
	)
)
	
--
inv estadoViajeImplicaViaje:
	self.estado = #ENVIAJE implies self.viajeQueHaceCoche -> exists(viaje | viaje.fechaFin = null)

--si un coche se encuentra en una ciudad, su próximo viaje debe empezar desde esa ciudad y 
--no desde otra
inv cuidadDeDestinoAnteriorCuidadDeOrigenSiguiente:
  self.viajeQueHaceCoche -> forAll( v | self.viajeQueHaceCoche -> select(v2 | v2.fechaFin < v.fechaInicio) -> sortedBy(fechaFin) -> last().ciudadDestinoDelViaje = v.ciudadOrigenDelViaje)

inv cocheViajandoOEnCiudad:
    (self.estado = EstadoCoche :: ENVIAJE) or (self.estado = EstadoCoche :: ESTACIONADO) or (self.estado = EstadoCoche :: ENTALLER)

inv cocheEnCiudadLlegadaUltimoViaje:
    self.viajeQueHaceCoche->exists(viaje | viaje.fechaFin <> null) implies
    (self.viajeQueHaceCoche->select(v | v.fechaFin <> null)->sortedBy(fechaFin)->last().ciudadDestinoDelViaje = self.ciudadCocheEstacionado)

--2 viajes no se pueden solapar en el tiempo
inv viajesNoSeSolapan:
    self.viajeQueHaceCoche->forAll(v1, v2 | 
        v1 <> v2 implies (v1.fechaInicio >= v2.fechaFin or v1.fechaFin <= v2.fechaInicio))

--un coche está en garantia si han pasao menos de 4 años desde que se matriculó o si han pasado menos días 
--que los indicados en la garantía del taller oficial donde el oche tuvo alguna revisión
-- inv cocheEnGarantia:
--     --CONVERTIR TALLER EN TALLER OFICIAL QUE ES EL QUE TIENE GARANTIA
--     self.enGarantia = true implies (
--         --
--         (((Clock.allInstances()->asSequence()->first().NOW) - (self.fechaMatriculacion)) < 400) or
--         -- Comprobar si alguna revisión en un taller oficial tiene una garantía vigente
--         (self.revisionDelCoche->exists(rev |
--             rev.tallerQueRevisa.oclIsTypeOf(TallerOficial) and
--             Clock.allInstances()->asSequence()->first().NOW - rev.fechaFin <= rev.tallerQueRevisa.oclAsType(TallerOficial).garantia
--         ))
--     )
